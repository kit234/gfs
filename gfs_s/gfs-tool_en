#! /bin/bash

if [ "$#" != "2" ]; then
	echo "Usage: gfs-tool options name"
	echo "options:"
	echo "      add            add the script"
	echo "      del            del the script"
	echo "      cat            cat the script"
	exit
fi
if [ "$1" == "add" ]; then
	if [ -f "${GFS_SH_PATH}/${2}_GFS.sh" ]; then
		echo "${2}_GFS.sh exist!"
		exit
	fi
	# select download
	echo "select the tool of download"
	echo "    1. axel"
	echo "    2. git"
	read -p "choice(default 1): " select
	if [[ "${select}" == "2" ]]; then
		GFS_Download=git
	else
		GFS_Download=axel
	fi
	#
	read -p "input the website of ${2}'s source: " website_source
	if [ "${GFS_Download}" == "axel" ]; then
		read -p "input the name of ${2}'s tar: " tar_name
	fi
	read -p "input the name of ${2}'directory: " dir_name
	# select configure
	echo "select the way to configure:"
	echo "    1. configure"
	echo "    2. autogen"
	read -p "choice(default 1): " select
	if [[ "${select}" == "2" ]]; then
		GFS_Configure=autogen
	else
		GFS_Configure=configure
	fi
	# start create
	if [ ! -d "${GFS_Software_Source_Path}/software_tar" ]; then
		mkdir ${GFS_Software_Source_Path}/software_tar
	fi
	SH=${GFS_SH_PATH}/${2}_GFS.sh
    touch ${SH}
	# write
	echo "#! /bin/bash" >> ${SH}
	echo 'GFS_Option=$1' >> ${SH}
	# Source
	if [ "${GFS_Download}" == "axel" ]; then
		echo "if [ \"\${GFS_Option}\" == \"source\" ]; then" >> ${SH}
		echo "    if [ ! -d \"\${GFS_Software_Source_Path}/software_tar\" ]; then" >> ${SH}
		echo "        mkdir \${GFS_Software_Source_Path}/software_tar" >> ${SH}
		echo "    fi" >> ${SH}
		echo "    axel ${website_source} -o \${GFS_Software_Source_Path}/software_tar" >> ${SH}
		echo "    tar -xvf \${GFS_Software_Source_Path}/software_tar/${tar_name} -C \${GFS_Software_Source_Path}" >> ${SH}
		echo "    echo \"the ${2}'s tar download to \${GFS_Software_Source_Path}/software_tar\"" >> ${SH}
		echo "    echo \"the ${2}'s tar untar to \${GFS_Software_Source_Path}\"" >> ${SH}
		echo "fi" >> ${SH}
	else
		echo "if [ \"\${GFS_Option}\" == \"source\" ]; then" >> ${SH}
		echo "    git clone ${website_source} \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
		echo "    echo \"the ${2}'s source download to \${GFS_Software_Source_Path}/software_tar\"" >> ${SH}
		echo "fi" >> ${SH}
	fi
	# Configure
	if [ "${GFS_Configure}" == "configure" ]; then
		echo "if [ \"\${GFS_Option}\" == \"configure\" ]; then" >> ${SH}
		echo "    if [ ! -f \"\${GFS_Software_Source_Path}/${dir_name}/configure\" ]; then" >> ${SH}
		echo "        echo \"\${GFS_Software_Source_Path}/${dir_name}/configure No exist!\"" >> ${SH}
		echo "        unset GFS_Software_Source_Path GFS_Option" >> ${SH}
		echo "        exit" >> ${SH}
		echo "    fi" >> ${SH}
		echo "    cd \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
		echo "    while true ; do " >> ${SH}
		echo "        read -p \"input the parameter of configure[(s)tart,(q)uit,(h)elp]: \" GFS_Buffer" >> ${SH}
		echo "        if [[ \"\${GFS_Buffer}\" == \"q\" ]]; then" >> ${SH}
		echo "            break" >> ${SH}
		echo "        elif [[ \"\${GFS_Buffer}\" == \"h\" ]]; then" >> ${SH}
		echo "            ./configure --help" >> ${SH}
		echo "        elif [[ \"\${GFS_Buffer}\" == \"s\" ]]; then" >> ${SH}
		echo "            ./configure \${GFS_Configure_Option}" >> ${SH}
		echo "            break" >> ${SH}
		echo "        else" >> ${SH}
		echo "            GFS_Configure_Option=\"\${GFS_Configure_Option} \${GFS_Buffer}\"" >> ${SH}
		echo "        fi" >> ${SH}
		echo "    done" >> ${SH}
		echo "    unset GFS_Configure_Option GFS_Buffer" >> ${SH}
		echo "fi" >> ${SH}
	else
		echo "if [ \"\${GFS_Option}\" == \"configure\" ]; then" >> ${SH}
		echo "    if [ ! -f \"\${GFS_Software_Source_Path}/${dir_name}/autogen.sh\" ]; then" >> ${SH}
		echo "        echo \"\${GFS_Software_Source_Path}/${dir_name}/autogen.sh No exist!\"" >> ${SH}
		echo "        unset GFS_Software_Source_Path GFS_Option" >> ${SH}
		echo "        exit" >> ${SH}
		echo "    fi" >> ${SH}
		echo "    cd \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
		echo "    while true; do" >> ${SH}
		echo "        read -p \"input the parameter of autogen[(s)tart,(q)uit,(h)elp]: \" GFS_Buffer" >> ${SH}
		echo "        if [[ \"\${GFS_Buffer}\" == \"q\" ]]; then" >> ${SH}
		echo "            break" >> ${SH}
		echo "        elif [[ \"\${GFS_Buffer}\" == \"h\" ]]; then" >> ${SH}
		echo "            ./autogen.sh --help" >> ${SH}
		echo "        elif [[ \"\${GFS_Buffer}\" == \"s\" ]]; then" >> ${SH}
		echo "            ./autogen.sh \${GFS_Autogen_Option}" >> ${SH}
		echo "            break" >> ${SH}
		echo "        else" >> ${SH}
		echo "            GFS_Autogen_Option=\"\${GFS_Autogen_Option} \${GFS_Buffer}\"" >> ${SH}
		echo "        fi" >> ${SH}
		echo "    done" >> ${SH}
		echo "    unset GFS_Autogen_Option GFS_Buffer" >> ${SH}
		echo "fi" >> ${SH}
	fi
	# make
	echo "if [ \"\${GFS_Option}\" == \"make\" ]; then" >> ${SH}
	echo "    if [ ! -f \"\${GFS_Software_Source_Path}/${dir_name}/Makefile\" ]; then" >> ${SH}
	echo "        echo \"\${GFS_Software_Source_Path}/${dir_name}/Makefile No exist!\"" >> ${SH}
	echo "        unset GFS_Option GFS_Software_Source_Path" >> ${SH}
	echo "        exit" >> ${SH}
	echo "    fi" >> ${SH}
	echo "    cd \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
	echo "    while true; do" >> ${SH}
	echo "        read -p \"input the parameter of make[(s)tart,(q)uit]: \" GFS_Buffer" >> ${SH}
	echo "        if [[ \"\${GFS_Buffer}\" == \"q\" ]]; then" >> ${SH}
	echo "            break" >> ${SH}
	echo "        elif [[ \"\${GFS_Buffer}\" == \"s\" ]]; then" >> ${SH}
	echo "            make \${GFS_Make_Option}" >> ${SH}
	echo "            break" >> ${SH}
	echo "        else" >> ${SH}
	echo "            GFS_Make_Option=\"\${GFS_Make_Option} \${GFS_Buffer}\"" >> ${SH}
	echo "        fi" >> ${SH}
	echo "    done" >> ${SH}
	echo "    unset GFS_Buffer GFS_Make_Option" >> ${SH}
	echo "fi" >> ${SH}
	# makeclean
	echo "if [ \"\${GFS_Option}\" == \"makeclean\" ]; then" >> ${SH}
	echo "    if [ ! -f \"\${GFS_Software_Source_Path}/${dir_name}/Makefile\" ]; then" >> ${SH}
	echo "        echo \"\${GFS_Software_Source_Path}/${dir_name}/Makefile No exist!\"" >> ${SH}
	echo "        unset GFS_Option GFS_Software_Source_Path" >> ${SH}
	echo "        exit" >> ${SH}
	echo "    fi" >> ${SH}
	echo "    cd \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
	echo "    make clean" >> ${SH}
	echo "fi" >> ${SH}
	# uninstall
	echo "if [ \"\${GFS_Option}\" == \"uninstall\" ]; then" >> ${SH}
	echo "    if [ ! -f \"\${GFS_Software_Source_Path}/${dir_name}/Makefile\" ]; then" >> ${SH}
	echo "        echo \"\${GFS_Software_Source_Path}/${dir_name}/Makefile No exist!\"" >> ${SH}
	echo "        unset GFS_Option GFS_Software_Source_Path" >> ${SH}
	echo "        exit" >> ${SH}
	echo "    fi" >> ${SH}
	echo "    cd \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
	echo "    make uninstall" >> ${SH}
	echo "fi" >> ${SH}
	# install
	echo "if [ \"\${GFS_Option}\" == \"install\" ]; then" >> ${SH}
	echo "    if [ ! -f \"\${GFS_Software_Source_Path}/${dir_name}/Makefile\" ]; then" >> ${SH}
	echo "        echo \"\${GFS_Software_Source_Path}/${dir_name}/Makefile No exist!\"" >> ${SH}
	echo "        unset GFS_Option GFS_Software_Source_Path" >> ${SH}
	echo "        exit" >> ${SH}
	echo "    fi" >> ${SH}
	echo "    cd \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
	echo "    make install" >> ${SH}
	echo "fi" >> ${SH}
	# cd
	echo "if [ \"\${GFS_Option}\" == \"cd\" ]; then" >> ${SH}
	echo "    cd \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
	echo "    while true; do" >> ${SH}
	echo "        read -p \"Command: \" Command" >> ${SH}
	echo "        if [ \"\${Command}\" == \"exit\" ]; then" >> ${SH}
	echo "            unset Command GFS_Option GFS_Software_Source_Path" >> ${SH}
	echo "            exit" >> ${SH}
	echo "        fi" >> ${SH}
	echo "        \${Command}" >> ${SH}
	echo "    done" >> ${SH}
	echo "fi" >> ${SH}
	# remove
	echo "if [ \"\${GFS_Option}\" == \"remove\" ]; then" >> ${SH}
	if [ "${GFS_Download}" == "git" ]; then
		echo "    rm -r \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
		echo "fi" >> ${SH}
	else
		echo "    rm -r \${GFS_Software_Source_Path}/${dir_name}" >> ${SH}
		echo "    rm \${GFS_Software_Source_Path}/software_tar/${tar_name}" >> ${SH}
		echo "fi" >> ${SH}
	fi
	#
	echo "unset GFS_Option" >> ${SH}
	chmod u+x ${SH}
fi
if [ "$1" == "del" ]; then
	if [ ! -f "${GFS_SH_PATH}/${2}_GFS.sh" ]; then
		echo "文件${GFS_SH_PATH}/${2}_GFS.sh No exist!"
		exit
	fi
	rm ${GFS_SH_PATH}/${2}_GFS.sh
fi
if [ "$1" == "cat" ]; then
	if [ ! -f "${GFS_SH_PATH}/${2}_GFS.sh" ]; then
		echo "文件${GFS_SH_PATH}/${2}_GFS.sh No exist!"
		exit
	fi
	cat ${GFS_SH_PATH}/${2}_GFS.sh
fi

unset SH select website_source tar_name dir_name GFS_Configure GFS_Download
